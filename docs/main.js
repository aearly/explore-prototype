/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const t="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,i=(t,i,e=null)=>{for(;i!==e;){const e=i.nextSibling;t.removeChild(i),i=e}},e=`{{lit-${String(Math.random()).slice(2)}}}`,s=`\x3c!--${e}--\x3e`,n=new RegExp(`${e}|${s}`);class o{constructor(t,i){this.parts=[],this.element=i;const s=[],o=[],a=document.createTreeWalker(i.content,133,null,!1);let c=0,d=-1,u=0;const{strings:p,values:{length:f}}=t;for(;u<f;){const t=a.nextNode();if(null!==t){if(d++,1===t.nodeType){if(t.hasAttributes()){const i=t.attributes,{length:e}=i;let s=0;for(let t=0;t<e;t++)r(i[t].name,"$lit$")&&s++;for(;s-- >0;){const i=p[u],e=l.exec(i)[2],s=e.toLowerCase()+"$lit$",o=t.getAttribute(s);t.removeAttribute(s);const r=o.split(n);this.parts.push({type:"attribute",index:d,name:e,strings:r}),u+=r.length-1}}"TEMPLATE"===t.tagName&&(o.push(t),a.currentNode=t.content)}else if(3===t.nodeType){const i=t.data;if(i.indexOf(e)>=0){const e=t.parentNode,o=i.split(n),a=o.length-1;for(let i=0;i<a;i++){let s,n=o[i];if(""===n)s=h();else{const t=l.exec(n);null!==t&&r(t[2],"$lit$")&&(n=n.slice(0,t.index)+t[1]+t[2].slice(0,-"$lit$".length)+t[3]),s=document.createTextNode(n)}e.insertBefore(s,t),this.parts.push({type:"node",index:++d})}""===o[a]?(e.insertBefore(h(),t),s.push(t)):t.data=o[a],u+=a}}else if(8===t.nodeType)if(t.data===e){const i=t.parentNode;null!==t.previousSibling&&d!==c||(d++,i.insertBefore(h(),t)),c=d,this.parts.push({type:"node",index:d}),null===t.nextSibling?t.data="":(s.push(t),d--),u++}else{let i=-1;for(;-1!==(i=t.data.indexOf(e,i+1));)this.parts.push({type:"node",index:-1}),u++}}else a.currentNode=o.pop()}for(const t of s)t.parentNode.removeChild(t)}}const r=(t,i)=>{const e=t.length-i.length;return e>=0&&t.slice(e)===i},a=t=>-1!==t.index,h=()=>document.createComment(""),l=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function c(t,i){const{element:{content:e},parts:s}=t,n=document.createTreeWalker(e,133,null,!1);let o=u(s),r=s[o],a=-1,h=0;const l=[];let c=null;for(;n.nextNode();){a++;const t=n.currentNode;for(t.previousSibling===c&&(c=null),i.has(t)&&(l.push(t),null===c&&(c=t)),null!==c&&h++;void 0!==r&&r.index===a;)r.index=null!==c?-1:r.index-h,o=u(s,o),r=s[o]}l.forEach(t=>t.parentNode.removeChild(t))}const d=t=>{let i=11===t.nodeType?0:1;const e=document.createTreeWalker(t,133,null,!1);for(;e.nextNode();)i++;return i},u=(t,i=-1)=>{for(let e=i+1;e<t.length;e++){const i=t[e];if(a(i))return e}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const p=new WeakMap,f=t=>(...i)=>{const e=t(...i);return p.set(e,!0),e},g=t=>"function"==typeof t&&p.has(t),v={},m={};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class w{constructor(t,i,e){this.t=[],this.template=t,this.processor=i,this.options=e}update(t){let i=0;for(const e of this.t)void 0!==e&&e.setValue(t[i]),i++;for(const t of this.t)void 0!==t&&t.commit()}_clone(){const i=t?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),e=[],s=this.template.parts,n=document.createTreeWalker(i,133,null,!1);let o,r=0,h=0,l=n.nextNode();for(;r<s.length;)if(o=s[r],a(o)){for(;h<o.index;)h++,"TEMPLATE"===l.nodeName&&(e.push(l),n.currentNode=l.content),null===(l=n.nextNode())&&(n.currentNode=e.pop(),l=n.nextNode());if("node"===o.type){const t=this.processor.handleTextExpression(this.options);t.insertAfterNode(l.previousSibling),this.t.push(t)}else this.t.push(...this.processor.handleAttributeExpressions(l,o.name,o.strings,this.options));r++}else this.t.push(void 0),r++;return t&&(document.adoptNode(i),customElements.upgrade(i)),i}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const b=` ${e} `;class y{constructor(t,i,e,s){this.strings=t,this.values=i,this.type=e,this.processor=s}getHTML(){const t=this.strings.length-1;let i="",n=!1;for(let o=0;o<t;o++){const t=this.strings[o],r=t.lastIndexOf("\x3c!--");n=(r>-1||n)&&-1===t.indexOf("--\x3e",r+1);const a=l.exec(t);i+=null===a?t+(n?b:s):t.substr(0,a.index)+a[1]+a[2]+"$lit$"+a[3]+e}return i+=this.strings[t],i}getTemplateElement(){const t=document.createElement("template");return t.innerHTML=this.getHTML(),t}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const x=t=>null===t||!("object"==typeof t||"function"==typeof t),$=t=>Array.isArray(t)||!(!t||!t[Symbol.iterator]);class k{constructor(t,i,e){this.dirty=!0,this.element=t,this.name=i,this.strings=e,this.parts=[];for(let t=0;t<e.length-1;t++)this.parts[t]=this._createPart()}_createPart(){return new S(this)}_getValue(){const t=this.strings,i=t.length-1;let e="";for(let s=0;s<i;s++){e+=t[s];const i=this.parts[s];if(void 0!==i){const t=i.value;if(x(t)||!$(t))e+="string"==typeof t?t:String(t);else for(const i of t)e+="string"==typeof i?i:String(i)}}return e+=t[i],e}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class S{constructor(t){this.value=void 0,this.committer=t}setValue(t){t===v||x(t)&&t===this.value||(this.value=t,g(t)||(this.committer.dirty=!0))}commit(){for(;g(this.value);){const t=this.value;this.value=v,t(this)}this.value!==v&&this.committer.commit()}}class M{constructor(t){this.value=void 0,this.i=void 0,this.options=t}appendInto(t){this.startNode=t.appendChild(h()),this.endNode=t.appendChild(h())}insertAfterNode(t){this.startNode=t,this.endNode=t.nextSibling}appendIntoPart(t){t.o(this.startNode=h()),t.o(this.endNode=h())}insertAfterPart(t){t.o(this.startNode=h()),this.endNode=t.endNode,t.endNode=this.startNode}setValue(t){this.i=t}commit(){if(null===this.startNode.parentNode)return;for(;g(this.i);){const t=this.i;this.i=v,t(this)}const t=this.i;t!==v&&(x(t)?t!==this.value&&this.h(t):t instanceof y?this.l(t):t instanceof Node?this.g(t):$(t)?this.v(t):t===m?(this.value=m,this.clear()):this.h(t))}o(t){this.endNode.parentNode.insertBefore(t,this.endNode)}g(t){this.value!==t&&(this.clear(),this.o(t),this.value=t)}h(t){const i=this.startNode.nextSibling,e="string"==typeof(t=null==t?"":t)?t:String(t);i===this.endNode.previousSibling&&3===i.nodeType?i.data=e:this.g(document.createTextNode(e)),this.value=t}l(t){const i=this.options.templateFactory(t);if(this.value instanceof w&&this.value.template===i)this.value.update(t.values);else{const e=new w(i,t.processor,this.options),s=e._clone();e.update(t.values),this.g(s),this.value=e}}v(t){Array.isArray(this.value)||(this.value=[],this.clear());const i=this.value;let e,s=0;for(const n of t)e=i[s],void 0===e&&(e=new M(this.options),i.push(e),0===s?e.appendIntoPart(this):e.insertAfterPart(i[s-1])),e.setValue(n),e.commit(),s++;s<i.length&&(i.length=s,this.clear(e&&e.endNode))}clear(t=this.startNode){i(this.startNode.parentNode,t.nextSibling,this.endNode)}}class _{constructor(t,i,e){if(this.value=void 0,this.i=void 0,2!==e.length||""!==e[0]||""!==e[1])throw new Error("Boolean attributes can only contain a single expression");this.element=t,this.name=i,this.strings=e}setValue(t){this.i=t}commit(){for(;g(this.i);){const t=this.i;this.i=v,t(this)}if(this.i===v)return;const t=!!this.i;this.value!==t&&(t?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=t),this.i=v}}class A extends k{constructor(t,i,e){super(t,i,e),this.single=2===e.length&&""===e[0]&&""===e[1]}_createPart(){return new C(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class C extends S{}let O=!1;(()=>{try{const t={get capture(){return O=!0,!1}};window.addEventListener("test",t,t),window.removeEventListener("test",t,t)}catch(t){}})();class T{constructor(t,i,e){this.value=void 0,this.i=void 0,this.element=t,this.eventName=i,this.eventContext=e,this.m=t=>this.handleEvent(t)}setValue(t){this.i=t}commit(){for(;g(this.i);){const t=this.i;this.i=v,t(this)}if(this.i===v)return;const t=this.i,i=this.value,e=null==t||null!=i&&(t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive),s=null!=t&&(null==i||e);e&&this.element.removeEventListener(this.eventName,this.m,this.$),s&&(this.$=j(t),this.element.addEventListener(this.eventName,this.m,this.$)),this.value=t,this.i=v}handleEvent(t){"function"==typeof this.value?this.value.call(this.eventContext||this.element,t):this.value.handleEvent(t)}}const j=t=>t&&(O?{capture:t.capture,passive:t.passive,once:t.once}:t.capture)
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */;function P(t){let i=E.get(t.type);void 0===i&&(i={stringsArray:new WeakMap,keyString:new Map},E.set(t.type,i));let s=i.stringsArray.get(t.strings);if(void 0!==s)return s;const n=t.strings.join(e);return s=i.keyString.get(n),void 0===s&&(s=new o(t,t.getTemplateElement()),i.keyString.set(n,s)),i.stringsArray.set(t.strings,s),s}const E=new Map,B=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const z=new
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class{handleAttributeExpressions(t,i,e,s){const n=i[0];if("."===n){return new A(t,i.slice(1),e).parts}return"@"===n?[new T(t,i.slice(1),s.eventContext)]:"?"===n?[new _(t,i.slice(1),e)]:new k(t,i,e).parts}handleTextExpression(t){return new M(t)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.2.1");const U=(t,...i)=>new y(t,i,"html",z)
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */,F=(t,i)=>`${t}--${i}`;let I=!0;void 0===window.ShadyCSS?I=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1."),I=!1);const L=t=>i=>{const s=F(i.type,t);let n=E.get(s);void 0===n&&(n={stringsArray:new WeakMap,keyString:new Map},E.set(s,n));let r=n.stringsArray.get(i.strings);if(void 0!==r)return r;const a=i.strings.join(e);if(r=n.keyString.get(a),void 0===r){const e=i.getTemplateElement();I&&window.ShadyCSS.prepareTemplateDom(e,t),r=new o(i,e),n.keyString.set(a,r)}return n.stringsArray.set(i.strings,r),r},N=["html","svg"],V=new Set,R=(t,i,e)=>{V.add(t);const s=e?e.element:document.createElement("template"),n=i.querySelectorAll("style"),{length:o}=n;if(0===o)return void window.ShadyCSS.prepareTemplateStyles(s,t);const r=document.createElement("style");for(let t=0;t<o;t++){const i=n[t];i.parentNode.removeChild(i),r.textContent+=i.textContent}(t=>{N.forEach(i=>{const e=E.get(F(i,t));void 0!==e&&e.keyString.forEach(t=>{const{element:{content:i}}=t,e=new Set;Array.from(i.querySelectorAll("style")).forEach(t=>{e.add(t)}),c(t,e)})})})(t);const a=s.content;e?function(t,i,e=null){const{element:{content:s},parts:n}=t;if(null==e)return void s.appendChild(i);const o=document.createTreeWalker(s,133,null,!1);let r=u(n),a=0,h=-1;for(;o.nextNode();){for(h++,o.currentNode===e&&(a=d(i),e.parentNode.insertBefore(i,e));-1!==r&&n[r].index===h;){if(a>0){for(;-1!==r;)n[r].index+=a,r=u(n,r);return}r=u(n,r)}}}(e,r,a.firstChild):a.insertBefore(r,a.firstChild),window.ShadyCSS.prepareTemplateStyles(s,t);const h=a.querySelector("style");if(window.ShadyCSS.nativeShadow&&null!==h)i.insertBefore(h.cloneNode(!0),i.firstChild);else if(e){a.insertBefore(r,a.firstChild);const t=new Set;t.add(r),c(e,t)}};window.JSCompiler_renameProperty=(t,i)=>t;const W={toAttribute(t,i){switch(i){case Boolean:return t?"":null;case Object:case Array:return null==t?t:JSON.stringify(t)}return t},fromAttribute(t,i){switch(i){case Boolean:return null!==t;case Number:return null===t?null:Number(t);case Object:case Array:return JSON.parse(t)}return t}},G=(t,i)=>i!==t&&(i==i||t==t),q={attribute:!0,type:String,converter:W,reflect:!1,hasChanged:G};class D extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=new Promise(t=>this._enableUpdatingResolver=t),this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const t=[];return this._classProperties.forEach((i,e)=>{const s=this._attributeNameForProperty(e,i);void 0!==s&&(this._attributeToPropertyMap.set(s,e),t.push(s))}),t}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const t=Object.getPrototypeOf(this)._classProperties;void 0!==t&&t.forEach((t,i)=>this._classProperties.set(i,t))}}static createProperty(t,i=q){if(this._ensureClassProperties(),this._classProperties.set(t,i),i.noAccessor||this.prototype.hasOwnProperty(t))return;const e="symbol"==typeof t?Symbol():`__${t}`,s=this.getPropertyDescriptor(t,e,i);void 0!==s&&Object.defineProperty(this.prototype,t,s)}static getPropertyDescriptor(t,i,e){return{get(){return this[i]},set(e){const s=this[t];this[i]=e,this._requestUpdate(t,s)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this._classProperties&&this._classProperties.get(t)||q}static finalize(){const t=Object.getPrototypeOf(this);if(t.hasOwnProperty("finalized")||t.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const t=this.properties,i=[...Object.getOwnPropertyNames(t),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t):[]];for(const e of i)this.createProperty(e,t[e])}}static _attributeNameForProperty(t,i){const e=i.attribute;return!1===e?void 0:"string"==typeof e?e:"string"==typeof t?t.toLowerCase():void 0}static _valueHasChanged(t,i,e=G){return e(t,i)}static _propertyValueFromAttribute(t,i){const e=i.type,s=i.converter||W,n="function"==typeof s?s:s.fromAttribute;return n?n(t,e):t}static _propertyValueToAttribute(t,i){if(void 0===i.reflect)return;const e=i.type,s=i.converter;return(s&&s.toAttribute||W.toAttribute)(t,e)}initialize(){this._saveInstanceProperties(),this._requestUpdate()}_saveInstanceProperties(){this.constructor._classProperties.forEach((t,i)=>{if(this.hasOwnProperty(i)){const t=this[i];delete this[i],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(i,t)}})}_applyInstanceProperties(){this._instanceProperties.forEach((t,i)=>this[i]=t),this._instanceProperties=void 0}connectedCallback(){this.enableUpdating()}enableUpdating(){void 0!==this._enableUpdatingResolver&&(this._enableUpdatingResolver(),this._enableUpdatingResolver=void 0)}disconnectedCallback(){}attributeChangedCallback(t,i,e){i!==e&&this._attributeToProperty(t,e)}_propertyToAttribute(t,i,e=q){const s=this.constructor,n=s._attributeNameForProperty(t,e);if(void 0!==n){const t=s._propertyValueToAttribute(i,e);if(void 0===t)return;this._updateState=8|this._updateState,null==t?this.removeAttribute(n):this.setAttribute(n,t),this._updateState=-9&this._updateState}}_attributeToProperty(t,i){if(8&this._updateState)return;const e=this.constructor,s=e._attributeToPropertyMap.get(t);if(void 0!==s){const t=e.getPropertyOptions(s);this._updateState=16|this._updateState,this[s]=e._propertyValueFromAttribute(i,t),this._updateState=-17&this._updateState}}_requestUpdate(t,i){let e=!0;if(void 0!==t){const s=this.constructor,n=s.getPropertyOptions(t);s._valueHasChanged(this[t],i,n.hasChanged)?(this._changedProperties.has(t)||this._changedProperties.set(t,i),!0!==n.reflect||16&this._updateState||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(t,n))):e=!1}!this._hasRequestedUpdate&&e&&(this._updatePromise=this._enqueueUpdate())}requestUpdate(t,i){return this._requestUpdate(t,i),this.updateComplete}async _enqueueUpdate(){this._updateState=4|this._updateState;try{await this._updatePromise}catch(t){}const t=this.performUpdate();return null!=t&&await t,!this._hasRequestedUpdate}get _hasRequestedUpdate(){return 4&this._updateState}get hasUpdated(){return 1&this._updateState}performUpdate(){this._instanceProperties&&this._applyInstanceProperties();let t=!1;const i=this._changedProperties;try{t=this.shouldUpdate(i),t?this.update(i):this._markUpdated()}catch(i){throw t=!1,this._markUpdated(),i}t&&(1&this._updateState||(this._updateState=1|this._updateState,this.firstUpdated(i)),this.updated(i))}_markUpdated(){this._changedProperties=new Map,this._updateState=-5&this._updateState}get updateComplete(){return this._getUpdateComplete()}_getUpdateComplete(){return this._updatePromise}shouldUpdate(t){return!0}update(t){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((t,i)=>this._propertyToAttribute(i,this[i],t)),this._reflectingProperties=void 0),this._markUpdated()}updated(t){}firstUpdated(t){}}D.finalized=!0;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const H=t=>i=>"function"==typeof i?((t,i)=>(window.customElements.define(t,i),i))(t,i):((t,i)=>{const{kind:e,elements:s}=i;return{kind:e,elements:s,finisher(i){window.customElements.define(t,i)}}})(t,i),J=(t,i)=>"method"===i.kind&&i.descriptor&&!("value"in i.descriptor)?Object.assign(Object.assign({},i),{finisher(e){e.createProperty(i.key,t)}}):{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof i.initializer&&(this[i.key]=i.initializer.call(this))},finisher(e){e.createProperty(i.key,t)}};function K(t){return(i,e)=>void 0!==e?((t,i,e)=>{i.constructor.createProperty(e,t)})(t,i,e):J(t,i)}function Q(t){return(i,e)=>{const s={get(){return this.renderRoot.querySelector(t)},enumerable:!0,configurable:!0};return void 0!==e?Y(s,i,e):X(s,i)}}const Y=(t,i,e)=>{Object.defineProperty(i,e,t)},X=(t,i)=>({kind:"method",placement:"prototype",key:i.key,descriptor:t})
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/,Z="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,tt=Symbol();class it{constructor(t,i){if(i!==tt)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){return void 0===this._styleSheet&&(Z?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const et=(t,...i)=>{const e=i.reduce((i,e,s)=>i+(t=>{if(t instanceof it)return t.cssText;if("number"==typeof t)return t;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${t}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(e)+t[s+1],t[0]);return new it(e,tt)};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litElementVersions||(window.litElementVersions=[])).push("2.3.1");const st={};class nt extends D{static getStyles(){return this.styles}static _getUniqueStyles(){if(this.hasOwnProperty(JSCompiler_renameProperty("_styles",this)))return;const t=this.getStyles();if(void 0===t)this._styles=[];else if(Array.isArray(t)){const i=(t,e)=>t.reduceRight((t,e)=>Array.isArray(e)?i(e,t):(t.add(e),t),e),e=i(t,new Set),s=[];e.forEach(t=>s.unshift(t)),this._styles=s}else this._styles=[t]}initialize(){super.initialize(),this.constructor._getUniqueStyles(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const t=this.constructor._styles;0!==t.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?Z?this.renderRoot.adoptedStyleSheets=t.map(t=>t.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(t.map(t=>t.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(t){const i=this.render();super.update(t),i!==st&&this.constructor.render(i,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(t=>{const i=document.createElement("style");i.textContent=t.cssText,this.renderRoot.appendChild(i)}))}render(){return st}}nt.finalized=!0,nt.render=(t,e,s)=>{if(!s||"object"!=typeof s||!s.scopeName)throw new Error("The `scopeName` option is required.");const n=s.scopeName,o=B.has(e),r=I&&11===e.nodeType&&!!e.host,a=r&&!V.has(n),h=a?document.createDocumentFragment():e;if(((t,e,s)=>{let n=B.get(e);void 0===n&&(i(e,e.firstChild),B.set(e,n=new M(Object.assign({templateFactory:P},s))),n.appendInto(e)),n.setValue(t),n.commit()})(t,h,Object.assign({templateFactory:L(n)},s)),a){const t=B.get(h);B.delete(h);const s=t.value instanceof w?t.value.template:void 0;R(n,h,s),i(e,e.firstChild),e.appendChild(h),B.set(e,t)}!o&&r&&window.ShadyCSS.styleElement(e.host)};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const ot=new WeakMap,rt=f(t=>i=>{if(!(i instanceof M))throw new Error("unsafeHTML can only be used in text bindings");const e=ot.get(i);if(void 0!==e&&x(t)&&t===e.value&&i.value===e.fragment)return;const s=document.createElement("template");s.innerHTML=t;const n=document.importNode(s.content,!0);i.setValue(n),ot.set(i,{value:t,fragment:n})});
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class at{constructor(t){this.classes=new Set,this.changed=!1,this.element=t;const i=(t.getAttribute("class")||"").split(/\s+/);for(const t of i)this.classes.add(t)}add(t){this.classes.add(t),this.changed=!0}remove(t){this.classes.delete(t),this.changed=!0}commit(){if(this.changed){let t="";this.classes.forEach(i=>t+=i+" "),this.element.setAttribute("class",t)}}}const ht=new WeakMap,lt=f(t=>i=>{if(!(i instanceof S)||i instanceof C||"class"!==i.committer.name||i.committer.parts.length>1)throw new Error("The `classMap` directive must be used in the `class` attribute and must be the only part in the attribute.");const{committer:e}=i,{element:s}=e;let n=ht.get(i);void 0===n&&(s.setAttribute("class",e.strings.join(" ")),ht.set(i,n=new Set));const o=s.classList||new at(s);n.forEach(i=>{i in t||(o.remove(i),n.delete(i))});for(const i in t){const e=t[i];e!=n.has(i)&&(e?(o.add(i),n.add(i)):(o.remove(i),n.delete(i)))}"function"==typeof o.commit&&o.commit()});function ct(t){var i,e;return"image"===t.post_hint?t.url:null!==(e=null===(i=dt(t))||void 0===i?void 0:i.url)&&void 0!==e?e:""}function dt(t){var i,e,s;const n="image"===t.post_hint;return function(t){return!!t.gallery_data}(t)?function(t){const i=t.gallery_data.items[0],e=t.media_metadata[i.media_id];if(!e)return;let s=e.p.find(t=>t.x>300);s||(s=e.s);if(!s)return;return{url:s.u,width:s.x,height:s.y}}(t):n?null===(i=t.preview)||void 0===i?void 0:i.images[0].source:(null===(e=t.preview)||void 0===e?void 0:e.images[0].resolutions)?null===(s=t.preview)||void 0===s?void 0:s.images[0].source:void 0}function ut(t){return(new DOMParser).parseFromString(t,"text/html").documentElement.textContent}function pt(t){var i;const e=document.createElement("div");e.innerHTML=t;const s=null===(i=e.querySelector(".md"))||void 0===i?void 0:i.firstElementChild;if(s)return s.outerHTML}var ft=function(t,i,e,s){for(var n,o=arguments.length,r=o<3?i:null===s?s=Object.getOwnPropertyDescriptor(i,e):s,a=t.length-1;a>=0;a--)(n=t[a])&&(r=(o<3?n(r):o>3?n(i,e,r):n(i,e))||r);return o>3&&r&&Object.defineProperty(i,e,r),r};let gt=class extends nt{constructor(){super(),this.subreddit&&this.makeQuery()}attributeChangedCallback(t,i,e){"subreddit"===t&&i!==e&&(this.subreddit=e,this.makeQuery(),this.fetchAbout())}async makeQuery(){var t;if(this.data=void 0,!this.subreddit)return;const i=await fetch(`https://www.reddit.com/r/${this.subreddit}.json`,{mode:"cors"}),e=await i.json();this.data=e.data,console.log(null===(t=this.data)||void 0===t?void 0:t.children.map(t=>t.data.title))}async fetchAbout(){if(this.about=void 0,!this.subreddit)return;const t=await fetch(`https://www.reddit.com/r/${this.subreddit}/about.json`,{mode:"cors"}),i=await t.json();this.about=i.data}static get styles(){return et`
      .posts {
        background-color: white;
        color: black;
      }

      .post {
        display: block;
        text-decoration: none;
        color: inherit;
      }

      .post-top {
        display: flex;
        flex-direction: row;
        padding: 12px 16px 0px;
      }

      .sr-icon {
        width: 32px;
        height: 32px;
        flex: none;
        margin-right: 4px;
        border-radius: 50px;
        border: 1px solid rgba(0, 0, 0, 0.2);
      }
      .no-icon {
        background-color: blueviolet;
      }
      .sr {
        flex: auto;
        font-size: 14px;
        line-height: 1em;
      }
      .sr .author {
        color: grey;
        font-size: 12px;
        line-height: 1;
      }
      .join {
        background: transparent;
        color: black;
        border-radius: 50px;
        border: 1.5px solid black;
        flex: none;
        font-weight: bold;
        font-size: 17px;
        line-height: 1em;
        text-align: center;
        text-indent: -3px;
        width: 20px;
        height: 20px;
        cursor: pointer;
      }

      .post-title {
        padding: 8px 16px;
        font-weight: bold;
        font-size: 16px;
      }

      .media {
        display: block;
        width: 100%;
      }

      .selftext {
        padding: 8px 16px;
        font-size: 14px;
        max-width: 100%;
        word-break: break-word;
      }

      .post-bottom {
        padding: 12px 12px 16px;
      }

      .post-bottom img {
        display: inline-block;
        width: 305px;
      }
    `}render(){var t;if(!this.data)return null;console.log(this.data);const i=(null===(t=this.about)||void 0===t?void 0:t.icon_img)||"https://www.redditstatic.com/icon_planet_2x.png";return U`<div class="posts">
      ${this.data.children.filter(t=>!t.data.stickied).map(t=>{var e;const s=t.data,n=ct(s);return U`<a
            class="post"
            target="_blank"
            href="https://reddit.com/${s.id}"
          >
            <div class="post-top">
              <img
                class=${lt({"sr-icon":!0,"no-icon":!(null===(e=this.about)||void 0===e?void 0:e.icon_img)})}
                src="${i}"
              />
              <div class="sr">
                r/${s.subreddit}<br /><span class="author"
                  >u/${s.author}</span
                >
              </div>
              <button class="join" title="join r/${s.subreddit}">+</button>
            </div>
            <div class="post-title">
              ${rt(s.title)}
            </div>
            ${s.selftext_html?U`<div class="selftext">
                  ${rt(ut(s.selftext_html))}
                </div>`:""}
            ${n?rt(`<img class="media" src=${n} />`):""}
            <div class="post-bottom">
              <img src="fake-post-meta.png" />
            </div>
          </a>`})}
    </div>`}};ft([K({attribute:!0,type:String})],gt.prototype,"subreddit",void 0),ft([K({attribute:!0,type:Object})],gt.prototype,"data",void 0),ft([K({attribute:!0,type:Object})],gt.prototype,"about",void 0),gt=ft([H("subreddit-view")],gt);var vt=function(t,i){this.original=t,this.clamped=i};function mt(t,i){var e=window;i||(i={clamp:"auto",truncationChar:"…",splitOnChars:[".","-","–","—"," "]});var s,n,o,r,a={clamp:i.clamp||"auto",splitOnChars:i.splitOnChars||[".","-","–","—"," "],truncationChar:i.truncationChar||"…",truncationHTML:i.truncationHTML},h=a.splitOnChars.slice(0),l=h[0],c=(t.style,t.innerHTML),d=a.clamp,u=d.indexOf&&(d.indexOf("px")>-1||d.indexOf("em")>-1);function p(t,i){return e.getComputedStyle(t).getPropertyValue(i)}function f(i){var e=i||t.clientHeight,s=g(t);return Math.max(Math.floor(e/s),0)}function g(t){var i=p(t,"line-height");return"normal"===i&&(i=1.1*parseFloat(parseFloat(p(t,"font-size")).toFixed(0))),parseFloat(parseFloat(i).toFixed(0))}function v(t){return Math.max(t.scrollHeight,t.clientHeight)-4}function m(i){if(i.lastChild)return i.lastChild.children&&i.lastChild.children.length>0?m(Array.prototype.slice.call(i.children).pop()):i.lastChild&&i.lastChild.nodeValue&&""!==i.lastChild.nodeValue&&i.lastChild.nodeValue!==a.truncationChar?i.lastChild:i.lastChild.nodeValue?i.lastChild&&i.lastChild.parentNode&&i.lastChild.nodeValue===a.truncationChar?(i.lastChild.parentNode.removeChild(i.lastChild),m(t)):i:null!==i.lastChild.firstChild&&i.lastChild.firstChild.nodeValue!==a.truncationChar||!i.lastChild.parentNode||(i.lastChild.parentNode.removeChild(i.lastChild),i.children&&0!==i.children.length||!i.parentNode)?3===i.lastChild.nodeType?i.lastChild:m(i.lastChild):(i.parentNode.removeChild(i),m(t))}function w(t,i){t.nodeValue=i+a.truncationChar}a.truncationHTML&&((o=document.createElement("span")).innerHTML=a.truncationHTML),"auto"===d?d=f().toString():u&&(d=f(parseInt(d,10)).toString());var b,y=(b=Number(d),g(t)*b);return y<v(t)&&(r=function i(e,r){if(e&&r&&e.nodeValue){if(e.nodeValue.trim().endsWith(a.truncationChar)||w(e,e.nodeValue),v(t)<=r)return t.innerHTML;var c=e.nodeValue.replace(a.truncationChar,"");if(s||(l=h.length>0?h.shift():"",s=c.split(l)),s.length>1?(n=s.pop(),w(e,s.join(l))):s=null,o&&(e.nodeValue=e.nodeValue.replace(a.truncationChar,""),t.innerHTML=e.nodeValue+" "+o.innerHTML+a.truncationChar),s){if(t.clientHeight<=r){if(!(h.length>=0&&""!==l))return t.innerHTML;w(e,s.join(l)+l+n),s=null}}else""===l&&(w(e,""),e=m(t),h=a.splitOnChars.slice(0),l=h[0],s=null,n=null);return i(e,r)}}(m(t),y)),new vt(c,r)}var wt=()=>{return et`
  :host {
    --tile-size: 156px;
    --gradient-1: linear-gradient(97.51deg, #ff4400 -7.08%, #ffb330 116.57%);
    --gradient-2: linear-gradient(89.94deg, #c274f0 0%, #f14fb0 100%);
    --gradient-3: linear-gradient(
      89.94deg,
      #51b9ff 0%,
      #7785ff 52.6%,
      #b279ff 73.96%,
      #ff81ed 100%
    );
    --gradient-4: linear-gradient(97.51deg, #048de9 -7.08%, #0fc0d2 116.57%);
    --gradient-5: linear-gradient(71.53deg, #c30d47 20.89%, #fe4301 121.62%);
    --gradient-6: linear-gradient(91.64deg, #f5441f -10.49%, #fc7519 109.75%);
    --gradient-7: linear-gradient(91.64deg, #5b3dc1 -10.49%, #aa48c0 109.75%);
    --gradient-8: linear-gradient(91.64deg, #3353b8 -10.49%, #685cfc 109.75%);
  }
  .grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-auto-rows: calc((var(--tile-size) + 16px) / ${4});
    background-color: #fff;
    padding: 8px;
    /* grid-gap: 16px; */
    grid-auto-flow: dense;
  }

  .post-tile {
    overflow: hidden;
    position: relative;
    cursor: pointer;
    border-radius: 16px;
    margin: 8px;
    color: white;
    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.15);

    grid-row-end: span 4;
  }

  .post-tile-text {
    display: flex;
    flex-direction: column;
    padding: 16px;
    font-size: 12px;
    line-height: 17px;
    text-shadow: 0px 2px 4px rgba(0, 0, 0, 0.25);
    text-overflow: ellipsis;
    margin: 0;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  .shim {
    background-color: rgba(0, 0, 0, 0.25);
  }

  .post-text-only .post-tile-text {
    box-shadow: unset;
    background-color: transparent;
  }

  .loader {
    grid-column-end: span 2;
  }

  .post-tile-image {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: top center;
    /* height: var(--tile-size); */
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
  .post-text-only {
    background-image: var(--gradient-1);
  }

  .post-tile:nth-child(8n).post-text-only {
    background-image: var(--gradient-2);
  }
  .post-tile:nth-child(8n + 1).post-text-only {
    background-image: var(--gradient-3);
  }
  .post-tile:nth-child(8n + 2).post-text-only {
    background-image: var(--gradient-4);
  }
  .post-tile:nth-child(8n + 3).post-text-only {
    background-image: var(--gradient-5);
  }
  .post-tile:nth-child(8n + 4).post-text-only {
    background-image: var(--gradient-6);
  }
  .post-tile:nth-child(8n + 5).post-text-only {
    background-image: var(--gradient-7);
  }
  .post-tile:nth-child(8n + 6).post-text-only {
    background-image: var(--gradient-8);
  }

  .hidden {
    display: none;
  }

  .subreddit {
    font-weight: normal;
    line-height: 1.2em;
    margin-top: 16px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    flex: none;
  }

  .post-text-only .post-tile-text .post-tile-title {
    text-shadow: none;
  }

  .spacer {
    flex: auto;
  }
  .post-tile-title {
    margin: 0;
    font-weight: 600;
    flex: none;
    vertical-align: bottom;
  }

  .post-tile-body {
    margin-top: 8px;
    font-weight: normal;
  }

  .post-tile-large {
    grid-column-end: span 2;
    /* grid-row-end: span 16; */
  }
  ${t=function(t){const i=Array(t);for(var e=0;e<t;e++)i[e]=e;return i}(16).map(t=>`\n    .span${t} {\n      grid-row-end: span ${t};\n    }\n  `).join("\n"),new it(String(t),tt)}

  .md a {
    color: inherit;
  }
`;var t};var bt=function(t,i,e,s){for(var n,o=arguments.length,r=o<3?i:null===s?s=Object.getOwnPropertyDescriptor(i,e):s,a=t.length-1;a>=0;a--)(n=t[a])&&(r=(o<3?n(r):o>3?n(i,e,r):n(i,e))||r);return o>3&&r&&Object.defineProperty(i,e,r),r};let yt=class extends nt{constructor(){super(...arguments),this.isImage=!1,this.showshim=!0,this.showtitle=!0,this.showsubreddit=!0}static get styles(){return wt()}updated(){this.titleElem&&mt(this.titleElem,{clamp:3}),this.bodyElem&&mt(this.bodyElem.firstElementChild,{clamp:5})}render(){return this.post?this._renderText(this.post,this.isImage):""}_renderText(t,i=!1){var e,s,n;const o=null!==(n=pt(null!==(s=ut(null!==(e=t.selftext_html)&&void 0!==e?e:""))&&void 0!==s?s:""))&&void 0!==n?n:"";return U`<div
      class=${lt({"post-tile-text":!0,shim:i&&this.showshim})}
    >
      <h3
        class=${lt({"post-tile-title":!0,hidden:i&&!this.showtitle})}
      >
        ${ut(t.title)}
      </h3>
      ${(null==o?void 0:o.length)?U`<div
            class=${lt({"post-tile-body":!0,hidden:i&&!this.showtitle})}
          >
            ${rt(o)}
          </div>`:""}
      <div class="spacer"></div>
      <div
        class=${lt({subreddit:!0,hidden:i&&!this.showsubreddit})}
      >
        r/${t.subreddit}
      </div>
    </div>`}};bt([K({attribute:!0,type:Object})],yt.prototype,"post",void 0),bt([K({attribute:!0,type:Boolean})],yt.prototype,"isImage",void 0),bt([Q(".post-tile-title")],yt.prototype,"titleElem",void 0),bt([Q(".post-tile-body")],yt.prototype,"bodyElem",void 0),yt=bt([H("tile-text")],yt);var xt=function(t,i,e,s){for(var n,o=arguments.length,r=o<3?i:null===s?s=Object.getOwnPropertyDescriptor(i,e):s,a=t.length-1;a>=0;a--)(n=t[a])&&(r=(o<3?n(r):o>3?n(i,e,r):n(i,e))||r);return o>3&&r&&Object.defineProperty(i,e,r),r};const $t={gaming:"gaming+halo+PS4+rpg+iosgaming+gamingsuggestions+computers+ShouldIbuythisgame+MechanicalKeyboards+Monitors+hardwareswap+OpTicGaming+DotA2+pcmasterrace+GirlGamers+gamecollecting+IndieGaming+Fallout+Games+nintendo+SuggestALaptop+Steam+Competitiveoverwatch+wow+funny",music:'Music+Vaporwave+Guitar+MusicEd+WeAreTheMusicMakers+indieheads+Metal+LetsTalkMusic+DeepIntoYouTube+musictheory+Metalcore+CasualConversation+ListeningHeads+AskReddit+woahdude+composer+poppunkers+anime+ThisIsOurMusic+unpopularopinion+AdviceAnimals+BABYMETAL+gaming+EDM+technology"',sports:"sports+soccer+todayilearned+starcraft+baseball+esports+reddevils+AskReddit+nfl+CFB+nba+hockey+leagueoflegends+ABraThatFits+funny+formula1+MMA+Patriots+gaming+cordcutters+dogecoin+granturismo+Showerthoughts+unpopularopinion+MLS",beauty:"beauty+AsianBeauty+OldSchoolCool+funny+MUAontheCheap+makeupexchange+KoreanBeauty+pics+Porsche+RandomActsofMakeup+MakeupAddiction+disney+BeautyAddiction+BeautyBoxes+AskWomen+succulents+BeautyGuruChatter+beautytalkph+houseplants+aww+ShinyPokemon+cats+gardening+FreeKarma4U+gaming"};let kt=class extends nt{constructor(){super(),this.pending=!1,this.showtitle=!0,this.showsubreddit=!0,this.showshim=!0,this.largeKarmaThreshold=2e4,this.largeCommentThreshold=100,this.loaderRegistered=!1,this.posts=[]}connectedCallback(){super.connectedCallback(),this.makeQuery()}updated(){this.observer||(this.observer=new IntersectionObserver(t=>{var i;console.log({entries:t}),t[0].isIntersecting&&(console.log(`load more ${this.afterId}`),this._loader&&(null===(i=this.observer)||void 0===i||i.unobserve(this._loader)),this.pending||this.makeQuery())},{root:document.querySelector("main"),rootMargin:"100px"})),this._loader&&this.afterId&&setTimeout(()=>{var t;this._loader&&(null===(t=this.observer)||void 0===t||t.observe(this._loader))},1e3)}static get styles(){return wt()}onTileClick(t){this.subreddit=t,this.setAttribute("topic","")}attributeChangedCallback(t,i,e){if(console.log(arguments),"topic"===t&&i!==e)return this.topic=e,void(this.topic&&(this.posts=[],this.afterId=void 0,this.subreddit=void 0,this.makeQuery()));t.includes("show")&&(this[t]="true"===e,this.showshim=this.showsubreddit||this.showtitle)}async makeQuery(){var t,i,e;if(!this.topic)return;if(this.pending)return;this.data=void 0,console.log(this.topic),this.pending=!0;const s=await fetch(`https://www.reddit.com/r/${$t[this.topic]}.json?after=${null!==(t=this.afterId)&&void 0!==t?t:""}`,{mode:"cors"}),n=await s.json();this.pending=!1,this.data=n.data;const o=null!==(e=null===(i=this.data)||void 0===i?void 0:i.children.map(t=>t.data))&&void 0!==e?e:[];console.log(o),this.posts=this.posts.concat(o.filter(t=>"link"!==t.post_hint)),this.afterId=n.data.after}render(){return this.subreddit?U`<subreddit-view
        subreddit=${this.subreddit}
      ></subreddit-view>`:U`
      <div class="grid">
        ${this._renderTiles()}
        ${0===this.posts.length?"":this._renderSpacers()}
      </div>
    `}_renderTiles(){return this.posts.map(t=>!!ct(t)?this._renderMediaTile(t):this._renderTextTile(t))}_renderSpacers(){return U`<div class="post-tile post-text-only span3"></div>
      <div class="post-tile post-text-only span2"></div>
      ${Array(4).fill(1).map(()=>U`<div class="post-tile post-text-only span1"></div>`)}
      <div class="loader"></div>`}_renderMediaTile(t){const i=t.ups>this.largeKarmaThreshold||t.num_comments/t.ups>.1,e=ct(t),s=`url('${e}')`,n=function(t){const i=dt(t);return i?i.height/i.width:1}(t),o=Math.round(4*n)*(i?2:1),r=`span${a=o,h=Math.round(4/3),l=8*(i?2:1),Math.min(Math.max(a,h),l)}`;var a,h,l;return U`<div
      @click=${()=>this.onTileClick(t.subreddit)}
      class=${lt({"post-tile":!0,[r]:!0,"post-tile-large":i})}
    >
      ${e?rt(`<div class="post-tile-image" style="background-image: ${s}" />`):""}
      ${this._renderText(t,!0)}
    </div>`}_renderTextTile(t){const i=t.ups>this.largeKarmaThreshold||t.title.length>100;return U`<div
      @click=${()=>this.onTileClick(t.subreddit)}
      class=${lt({"post-tile":!0,span6:!0,"post-tile-large":i,"post-text-only":!0})}
    >
      ${this._renderText(t,!1)}
    </div>`}_renderText(t,i=!1){return U`<tile-text .post=${t} isImage=${i} />`}_renderTextOld(t,i=!1){var e,s,n;const o=null!==(n=pt(null!==(s=ut(null!==(e=t.selftext_html)&&void 0!==e?e:""))&&void 0!==s?s:""))&&void 0!==n?n:"";return U`<div
      class=${lt({"post-tile-text":!0,shim:i&&this.showshim})}
    >
      <h3
        class=${lt({"post-tile-title":!0,hidden:i&&!this.showtitle})}
      >
        ${t.title}
      </h3>
      ${(null==o?void 0:o.length)?U`<div
            class=${lt({"post-tile-body":!0,hidden:i&&!this.showtitle})}
          >
            ${rt(o.slice(0,200))}
          </div>`:""}
      <div class="spacer"></div>
      <div
        class=${lt({subreddit:!0,hidden:i&&!this.showsubreddit})}
      >
        r/${t.subreddit}
      </div>
    </div>`}};xt([K({attribute:!0,type:String})],kt.prototype,"topic",void 0),xt([K({attribute:!0,type:String})],kt.prototype,"subreddit",void 0),xt([K({attribute:!0,type:Object})],kt.prototype,"data",void 0),xt([K({attribute:!0,type:Boolean})],kt.prototype,"showtitle",void 0),xt([K({attribute:!0,type:Boolean})],kt.prototype,"showsubreddit",void 0),xt([K({attribute:!0,type:Boolean})],kt.prototype,"showshim",void 0),xt([Q(".loader")],kt.prototype,"_loader",void 0),kt=xt([H("explore-page")],kt),async function(){const t=document.querySelector("explore-page");document.querySelectorAll("button.pill").forEach(i=>{i.addEventListener("click",()=>{const e=i.innerHTML.toLowerCase();console.log({topic:e}),t.setAttribute("topic",e)})}),document.querySelectorAll("input.checkbox").forEach(i=>{const e=i;e.addEventListener("change",()=>{const i=e.id||"showSubreddit";console.log(i),t.setAttribute(i,e.checked+"")})})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
